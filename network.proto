// Messages for network communication encapsulation.

import "game.proto";

// Details for messages which are split across multiple packets.
message Chunk {
  required uint32 segment_id = 1;
  required uint32 chunk_index = 2;
  optional bool last_chunk = 3;
}

// Messages sent by the network client. One REGISTER per player when the server
// connection is initially opened, then any number of MOVE or ACTION commands.
message Request {
  enum Command {
    REGISTER = 1;
    MOVE = 2;
    ACTION = 3;
    UNREGISTER = 4;
  }
  required string secret = 1;
  required Command command = 2;
  optional string name = 3;  // for REGISTER only
  optional Coordinate direction = 4;  // for MOVE only
}

// Messages sent back by the network server. One with full game state is sent
// when the client registers and subsequently for new rounds, and then changes
// are sent for each server tick.
message Response {
  repeated Block block = 1;
  repeated PlayerInfo player_info = 2;
  optional Stage.Id stage = 3;
  optional uint32 round_num = 4;
  optional Coordinate size = 5;
  optional uint32 player_id = 6;  // first response only
  optional Chunk chunk_info = 7;
}
