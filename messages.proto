// Game state and RPC requests/responses.

message RegisterRequest {
  required string player_secret = 1;
  required string player_name = 2;
}

message PlayerInfo {
  required uint32 player_id = 1;
  required string name = 2;
  optional bool alive = 3;
  repeated Block.Type inventory = 4;
}

message RegisterResponse {
  required PlayerInfo player = 1;
}

message IdentifiedRequest {
  required string player_secret = 1;
}

message MoveRequest {
  required string player_secret = 1;
  required Coordinate move = 2;
}

message Coordinate {
  required int32 x = 1;
  required int32 y = 2;
}

message Block {
  enum Type {
    PLAYER_HEAD = 1;
    PLAYER_TAIL = 2;
    WALL = 3;
    AMMO = 4;
    ROCKET = 5;

    // for future use
    MINE = 6;
    EXPLOSION = 7;
    ROCK = 8;
    TREE = 9;
    WATER = 10;
    GRASS = 11;
  }

  required Type type = 1;
  required Coordinate pos = 2;
  optional Coordinate direction = 3;
  optional uint64 created_tick = 4;
  optional uint32 player_id = 5;
}

message BlockProperties {
  // Instead of a rocket or player colliding with this block, it reflects.
  optional bool bounce = 1;
  // If a rocket or player collides with this block, both are destroyed.
  optional bool break = 2;
  // If a rocket collides with this block, it breaks and produces rockets
  // outbound in all directions.
  optional bool explode = 3;
}

message GetGameStateRequest {
  optional uint64 hash = 1;
}

message GameState {
  enum Stage {
    COLLECT_PLAYERS = 1;
    ROUND_START = 2;
    ROUND = 3;
    ROUND_END = 4;
  }

  required uint64 hash = 1;
  required Coordinate size = 2;
  repeated Block block = 3;
  repeated PlayerInfo player_info = 4;
  required Stage stage = 5;
}
